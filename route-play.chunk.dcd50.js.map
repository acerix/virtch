{"version":3,"sources":["webpack:///./routes/play/webgl2.tsx","webpack:///./routes/play/style.css","webpack:///./routes/play/index.tsx","webpack:///./routes/play/fragment.js","webpack:///./routes/play/vertex.js"],"names":["defaultContextOptions","alpha","depth","preserveDrawingBuffer","WebGL2","props","getContext","init","ready","draw","onResize","framesPerSecond","rest","ref","createRef","frameMilliseconds","undefined","useEffect","renderCallbackID","canvas","current","paused","frameCount","ctx","handleResize","width","window","innerWidth","height","innerHeight","addEventListener","handleBlur","handleFocus","setFullscreen","document","fullscreenElement","requestFullscreen","catch","err","console","log","render","setTimeout","requestAnimationFrame","whenReady","clearTimeout","cancelAnimationFrame","removeEventListener","initShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","Play","shaderProgram","timeUniform","translateUniform","scaleUniform","translate","scale","maxRadius","program","positionAttrib","vertices","vertexBuffer","Math","sqrt","createProgram","fragmentShader","FRAGMENT_SHADER","attachShader","vertexShader","VERTEX_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","initProgram","getAttribLocation","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","getUniformLocation","class","style","Helmet","title","viewport","clear","COLOR_BUFFER_BIT","uniform1f","uniform2f","drawArrays","TRIANGLE_STRIP"],"mappings":"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","file":"route-play.chunk.dcd50.js","sourcesContent":["import { FunctionalComponent, createRef, h } from 'preact'\nimport { useEffect } from 'preact/hooks'\n\ntype GetContextFunction = (webGL2: HTMLCanvasElement) => WebGL2RenderingContext\n\ntype InitFunction = (ctx: WebGL2RenderingContext) => void\n\ntype ReadyFunction = (whenReady: VoidFunction) => void\n\ntype DrawFunction = (ctx: WebGL2RenderingContext, frameCount: number) => void\n\ntype ResizeFunction = (ctx: WebGL2RenderingContext) => void\n\ninterface WebGL2Options {\n  contextType?: string;\n  framesPerSecond?: number;\n}\n\ninterface WebGL2Props {\n  getContext?: GetContextFunction;\n  init?: InitFunction;\n  ready?: ReadyFunction;\n  draw: DrawFunction;\n  onResize?: ResizeFunction;\n  framesPerSecond?: number;\n  options?: WebGL2Options;\n}\n\nconst defaultContextOptions = {\n  alpha: false,\n  depth: false,\n  preserveDrawingBuffer: true\n}\n\nconst WebGL2: FunctionalComponent<WebGL2Props> = (props: WebGL2Props) => {\n  const { getContext, init, ready, draw, onResize, framesPerSecond, ...rest } = props\n  const ref = createRef()\n  const frameMilliseconds = framesPerSecond ? 1000 / framesPerSecond : undefined\n\n  useEffect(() => {\n    const canvas = ref.current as HTMLCanvasElement\n    let paused = false\n    let frameCount = -1\n    let renderCallbackID: number\n    const ctx = getContext ? getContext(canvas) : canvas.getContext('webgl2', defaultContextOptions) as WebGL2RenderingContext\n\n    const handleResize = (): void => {\n      ctx.canvas.width = window.innerWidth\n      ctx.canvas.height = window.innerHeight\n      if (onResize) onResize(ctx)\n    }\n    window.addEventListener('resize', handleResize)\n    handleResize()\n\n    const handleBlur = (): void => {\n      paused = true\n    }\n    window.addEventListener('blur', handleBlur)\n\n    const handleFocus = (): void => {\n      paused = false\n    }\n    window.addEventListener('focus', handleFocus)\n\n    const setFullscreen = (): void => {\n      if (!document.fullscreenElement) {\n        canvas.requestFullscreen().catch(err => {\n          console.log('No full!', err)\n          // alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`)\n        })\n      }\n    }\n    window.addEventListener('click', setFullscreen)\n\n    if (init) init(ctx)\n\n    const render = (): void => {\n      if (paused) {\n        setTimeout(render, 128)\n        return\n      }\n      frameCount++\n      if (frameMilliseconds) {\n        renderCallbackID = window.setTimeout(render, frameMilliseconds)\n      }\n      else {\n        renderCallbackID = window.requestAnimationFrame(render)\n      }\n      draw(ctx, frameCount)\n    }\n\n    const whenReady = (): void => {\n      setTimeout(render, 0)\n    }\n\n    if (ready===undefined) whenReady()\n    else ready(whenReady)\n\n    return (): void => {\n      if (frameMilliseconds) {\n        window.clearTimeout(renderCallbackID)\n      }\n      else {\n        window.cancelAnimationFrame(renderCallbackID)\n      }\n      window.removeEventListener('resize', handleResize)\n      window.removeEventListener('blur', handleBlur)\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('click', setFullscreen)\n    }\n\n  }, [getContext, init, ready, draw, onResize, ref, frameMilliseconds])\n\n  return <canvas ref={ref} {...rest} />\n}\n\nexport default WebGL2\n","// extracted by mini-css-extract-plugin\nexport default {\"canvas_frame\":\"canvas_frame__v+aHP\"};","import { FunctionalComponent, h } from 'preact'\nimport Helmet from 'react-helmet'\nimport WebGL2 from './webgl2'\nimport style from './style.css'\nimport fragmentShaderSource from './fragment.js'\nimport vertexShaderSource from './vertex.js'\n\nconst initShader = (gl: WebGL2RenderingContext, type: number, source: string): WebGLShader => {\n  const shader = gl.createShader(type)\n  if (!shader) {\n    throw 'Missing shader'\n  }\n  gl.shaderSource(shader, source)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw gl.getShaderInfoLog(shader)\n  }\n  return shader\n}\n\nconst initProgram = (gl: WebGL2RenderingContext): WebGLProgram => {\n  const program = gl.createProgram()\n  if (!program) {\n    throw 'Missing program'\n  }\n  const fragmentShader = initShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource)\n  gl.attachShader(program, fragmentShader)\n  const vertexShader = initShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  gl.attachShader(program, vertexShader)\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw gl.getProgramInfoLog(program)??'Error from getProgramParameter'\n  }\n  gl.useProgram(program)\n  return program\n}\n\nconst Play: FunctionalComponent = () => {\n  let shaderProgram: WebGLProgram\n  let timeUniform: WebGLUniformLocation|null\n  let translateUniform: WebGLUniformLocation|null\n  let scaleUniform: WebGLUniformLocation|null\n  const translate = [0, 0]\n  const scale = [1, 1]\n  let maxRadius = 1\n\n  const bindBuffers = (gl: WebGL2RenderingContext, program: WebGLProgram): void => {\n    const positionAttrib = gl.getAttribLocation(program, 'a_position')\n    const vertices = new Float32Array([\n      +1, +1, +0,\n      -1, +1, +0,\n      +1, -1, +0,\n      -1, -1, +0\n    ])\n    const vertexBuffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)\n    gl.vertexAttribPointer(positionAttrib, 3, gl.FLOAT, false, 0, 0)\n    gl.bindBuffer(gl.ARRAY_BUFFER, null) // unbind\n    gl.enableVertexAttribArray(positionAttrib)\n    timeUniform = gl.getUniformLocation(program, 'u_time')\n    translateUniform = gl.getUniformLocation(program, 'u_translate')\n    scaleUniform = gl.getUniformLocation(program, 'u_scale')\n  }\n\n  const init = (ctx: WebGL2RenderingContext): void => {\n    maxRadius = Math.sqrt(ctx.canvas.width**2 + ctx.canvas.height**2)\n    translate[0] = -ctx.canvas.width/2\n    translate[1] = -ctx.canvas.height/2\n    scale[0] = scale[1] = 2/maxRadius\n    shaderProgram = initProgram(ctx)\n    bindBuffers(ctx, shaderProgram)\n  }\n\n  const onResize = (ctx: WebGL2RenderingContext): void => {\n    ctx.viewport(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.clear(ctx.COLOR_BUFFER_BIT)\n    init(ctx)\n  }\n\n  const draw = (ctx: WebGL2RenderingContext, frameCount: number): void => {\n    ctx.uniform1f(timeUniform, frameCount)\n    ctx.uniform2f(translateUniform, translate[0], translate[1])\n    ctx.uniform2f(scaleUniform, scale[0], scale[1])\n    ctx.drawArrays(ctx.TRIANGLE_STRIP, 0, 4)\n  }\n\n  return (\n    <section class={style.canvas_frame}>\n      <Helmet title=\"Play\" />\n      <WebGL2 init={init} onResize={onResize} draw={draw} />\n    </section>\n  )\n}\n\nexport default Play\n","export default `#version 300 es\nprecision lowp float;\nuniform float u_time;\nuniform vec2 u_translate;\nuniform vec2 u_scale;\nout vec4 fragmentColor;\n\nvoid main() {\n  float m_0 = ( gl_FragCoord.x + u_translate.x ) * u_scale.x;\n  float m_1 = ( gl_FragCoord.y + u_translate.y ) * u_scale.y;\n  float radiusSquared = pow(sin(u_time/60.0), 2.0);\n  bool inside = m_0*m_0 + m_1*m_1 < radiusSquared;\n  fragmentColor.r = fragmentColor.b = inside ? 0.5 : 0.0;\n}\n`\n","export default `#version 300 es\nin vec2 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\nvoid main(void) {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_color = a_color;\n}\n`\n"],"sourceRoot":""}